#!/usr/bin/env bash
set -e

warn() { echo >&2 "$(basename $0):" "$@"; }
die()  { warn "$@"; exit 1; }

check_submodules() {
    count=$(git submodule status --recursive | sed -n -e '/^[^ ]/p' | wc -l)
    [ $count -eq 0 ] || {
        warn "$count Git submodules are not up to date"
        warn 'Run `git submodule update --init`?'
    }
}

build_3tools() {
    local prefix="$1"
    local archive_dir="$base_dir/.archive"

    mkdir -p "$archive_dir" "$prefix/src"
    build_bash
    build_text_cmds
}

build_bash() {
    local bash_ver=bash-3.2.57
    local bash_tarball=$bash_ver.tar.gz
    local src_dir="$prefix/src/$bash_ver"

    [ -s "$archive_dir/$bash_tarball" ] \
        || wget -O "$archive_dir/$bash_tarball" \
            "https://ftp.gnu.org/gnu/bash/$bash_tarball"

    pkg-config --version >/dev/null \
        || die "Cannot run pkg-config; do you have dev tools installed?"
    pkg-config --print-errors libbsd \
        || die "Cannot find libbsd; please install libbsd-dev package."

    [ -s "$src_dir/configure" ] \
        || tar -x -C "$prefix/src" -f "$archive_dir/$bash_tarball"

    [ -x "$prefix/bin/bash" ] || (
           cd "$src_dir" \
        && ./configure --prefix="$prefix" \
        && make -j 8 \
        && make install MAKEINFO=true
    )
}

build_text_cmds() {
    local text_cmds_ver=text_cmds-87
    local text_cmds_tarball=$text_cmds_ver.tar.gz
    local src_dir_sed="$prefix/src/$text_cmds_ver/sed"
    local src_dir_head="$prefix/src/$text_cmds_ver/head"

    [ -s "$archive_dir/$text_cmds_tarball" ] \
        || wget -O "$archive_dir/$text_cmds_tarball" \
            "https://opensource.apple.com/tarballs/text_cmds/$text_cmds_tarball"

    [ -s "$src_dir_sed/main.c" ] \
        || tar -x -C "$prefix/src" -f "$archive_dir/$text_cmds_tarball"

    #   The following sed script must be idempotent, so ensure you're
    #   matching only the old code, and not the new, when trigging changes.
    sed -e '
        /#include <stdio.h>/s,stdio,bsd/stdio,
        /if(setlinebuf(stdout) != 0)/ {
            s//setlinebuf(stdout);/
            n
            d
        }' -i $src_dir_sed/main.c $src_dir_head/head.c

    [ -x "$prefix/bin/sed" ] || (
           cd "$src_dir_sed" \
        && gcc -D'__FBSDID(x)=' -o $prefix/bin/sed "$@" *.c -lbsd
    )

    [ -x "$prefix/bin/head" ] || (
           cd "$src_dir_head" \
        && gcc -D'__FBSDID(x)=' -o $prefix/bin/head "$@" *.c -lbsd
    )
}

############################################################
# Main

# We use both UTF-8 and sorting in our tests so both collation and
# character set must be set. We use LC_ALL to override any user
# settings. We'd prefer C collation (local `C.UTF-8`) but this isn't
# always installed whereas `en_US.UTF-8` almost invariably is.
#
export LC_ALL=en_US.UTF-8

# Environment variables passed on to everything in build/test framework.
#
export base_dir="$(cd $(dirname "$0")/.. && pwd -P)"
export build_dir="$base_dir/.build"
export build_t_dir="$build_dir/t"       # Data generated by tests

# Clear any data generated by previous test runs.
#
rm    -rf "$build_t_dir"
mkdir -p  "$build_t_dir"

cd "$base_dir"
check_submodules

if [[ $(uname) == Darwin ]]; then
    #   The Bash shipped with MacOS will never be higher than version 3,
    #   due to licensing issues.
    export EXPECTED_BASH_VERSINFO='-eq 3'
    #   BSD tools are the default.
    [[ _"$1" = _-3 ]] && shift      # ignored; we're already effectively -3
else    # not MacOS
    export EXPECTED_BASH_VERSINFO='-ge 4'
    [[ _"$1" = _-3 ]] && {          # Test with Bash 3 and other old tools
        shift
        EXPECTED_BASH_VERSINFO='-eq 3'
        build_3tools "$build_dir/local"
        PATH=$build_dir/local/bin:$PATH
    }
fi

bats/bin/bats "${@:-t/}"
